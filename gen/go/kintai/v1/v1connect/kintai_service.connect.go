// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kintai/v1/kintai_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pyama2000/xoon-proto/gen/go/kintai/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KintaiServiceName is the fully-qualified name of the KintaiService service.
	KintaiServiceName = "kintai.v1.KintaiService"
)

// KintaiServiceClient is a client for the kintai.v1.KintaiService service.
type KintaiServiceClient interface {
	Start(context.Context, *connect_go.Request[v1.StartRequest]) (*connect_go.Response[v1.StartResponse], error)
	Finish(context.Context, *connect_go.Request[v1.FinishRequest]) (*connect_go.Response[v1.FinishResponse], error)
}

// NewKintaiServiceClient constructs a client for the kintai.v1.KintaiService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKintaiServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KintaiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kintaiServiceClient{
		start: connect_go.NewClient[v1.StartRequest, v1.StartResponse](
			httpClient,
			baseURL+"/kintai.v1.KintaiService/Start",
			opts...,
		),
		finish: connect_go.NewClient[v1.FinishRequest, v1.FinishResponse](
			httpClient,
			baseURL+"/kintai.v1.KintaiService/Finish",
			opts...,
		),
	}
}

// kintaiServiceClient implements KintaiServiceClient.
type kintaiServiceClient struct {
	start  *connect_go.Client[v1.StartRequest, v1.StartResponse]
	finish *connect_go.Client[v1.FinishRequest, v1.FinishResponse]
}

// Start calls kintai.v1.KintaiService.Start.
func (c *kintaiServiceClient) Start(ctx context.Context, req *connect_go.Request[v1.StartRequest]) (*connect_go.Response[v1.StartResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// Finish calls kintai.v1.KintaiService.Finish.
func (c *kintaiServiceClient) Finish(ctx context.Context, req *connect_go.Request[v1.FinishRequest]) (*connect_go.Response[v1.FinishResponse], error) {
	return c.finish.CallUnary(ctx, req)
}

// KintaiServiceHandler is an implementation of the kintai.v1.KintaiService service.
type KintaiServiceHandler interface {
	Start(context.Context, *connect_go.Request[v1.StartRequest]) (*connect_go.Response[v1.StartResponse], error)
	Finish(context.Context, *connect_go.Request[v1.FinishRequest]) (*connect_go.Response[v1.FinishResponse], error)
}

// NewKintaiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKintaiServiceHandler(svc KintaiServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/kintai.v1.KintaiService/Start", connect_go.NewUnaryHandler(
		"/kintai.v1.KintaiService/Start",
		svc.Start,
		opts...,
	))
	mux.Handle("/kintai.v1.KintaiService/Finish", connect_go.NewUnaryHandler(
		"/kintai.v1.KintaiService/Finish",
		svc.Finish,
		opts...,
	))
	return "/kintai.v1.KintaiService/", mux
}

// UnimplementedKintaiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKintaiServiceHandler struct{}

func (UnimplementedKintaiServiceHandler) Start(context.Context, *connect_go.Request[v1.StartRequest]) (*connect_go.Response[v1.StartResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kintai.v1.KintaiService.Start is not implemented"))
}

func (UnimplementedKintaiServiceHandler) Finish(context.Context, *connect_go.Request[v1.FinishRequest]) (*connect_go.Response[v1.FinishResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kintai.v1.KintaiService.Finish is not implemented"))
}
