// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server_status/v1/server_status_service.proto

package server_statusv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pyama2000/xoon-proto/gen/go/server_status/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServerStatusServiceName is the fully-qualified name of the ServerStatusService service.
	ServerStatusServiceName = "server_status.v1.ServerStatusService"
)

// ServerStatusServiceClient is a client for the server_status.v1.ServerStatusService service.
type ServerStatusServiceClient interface {
	GetStatus(context.Context, *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error)
}

// NewServerStatusServiceClient constructs a client for the server_status.v1.ServerStatusService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerStatusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServerStatusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serverStatusServiceClient{
		getStatus: connect_go.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+"/server_status.v1.ServerStatusService/GetStatus",
			opts...,
		),
	}
}

// serverStatusServiceClient implements ServerStatusServiceClient.
type serverStatusServiceClient struct {
	getStatus *connect_go.Client[v1.GetStatusRequest, v1.GetStatusResponse]
}

// GetStatus calls server_status.v1.ServerStatusService.GetStatus.
func (c *serverStatusServiceClient) GetStatus(ctx context.Context, req *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// ServerStatusServiceHandler is an implementation of the server_status.v1.ServerStatusService
// service.
type ServerStatusServiceHandler interface {
	GetStatus(context.Context, *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error)
}

// NewServerStatusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerStatusServiceHandler(svc ServerStatusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/server_status.v1.ServerStatusService/GetStatus", connect_go.NewUnaryHandler(
		"/server_status.v1.ServerStatusService/GetStatus",
		svc.GetStatus,
		opts...,
	))
	return "/server_status.v1.ServerStatusService/", mux
}

// UnimplementedServerStatusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerStatusServiceHandler struct{}

func (UnimplementedServerStatusServiceHandler) GetStatus(context.Context, *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server_status.v1.ServerStatusService.GetStatus is not implemented"))
}
