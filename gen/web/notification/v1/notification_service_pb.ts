// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file notification/v1/notification_service.proto (package notification.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from enum notification.v1.Provider
 */
export enum Provider {
  /**
   * @generated from enum value: PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROVIDER_SLACK = 1;
   */
  SLACK = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Provider)
proto3.util.setEnumType(Provider, "notification.v1.Provider", [
  { no: 0, name: "PROVIDER_UNSPECIFIED" },
  { no: 1, name: "PROVIDER_SLACK" },
]);

/**
 * @generated from message notification.v1.NotifyRequest
 */
export class NotifyRequest extends Message<NotifyRequest> {
  /**
   * @generated from field: notification.v1.NotifyRequest.Information information = 1;
   */
  information?: NotifyRequest_Information;

  constructor(data?: PartialMessage<NotifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notification.v1.NotifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "information", kind: "message", T: NotifyRequest_Information },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotifyRequest {
    return new NotifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotifyRequest {
    return new NotifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotifyRequest {
    return new NotifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NotifyRequest | PlainMessage<NotifyRequest> | undefined, b: NotifyRequest | PlainMessage<NotifyRequest> | undefined): boolean {
    return proto3.util.equals(NotifyRequest, a, b);
  }
}

/**
 * @generated from message notification.v1.NotifyRequest.Information
 */
export class NotifyRequest_Information extends Message<NotifyRequest_Information> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: repeated string destinations = 2;
   */
  destinations: string[] = [];

  /**
   * @generated from field: notification.v1.Provider provider = 3;
   */
  provider = Provider.UNSPECIFIED;

  constructor(data?: PartialMessage<NotifyRequest_Information>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notification.v1.NotifyRequest.Information";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destinations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(Provider) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotifyRequest_Information {
    return new NotifyRequest_Information().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotifyRequest_Information {
    return new NotifyRequest_Information().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotifyRequest_Information {
    return new NotifyRequest_Information().fromJsonString(jsonString, options);
  }

  static equals(a: NotifyRequest_Information | PlainMessage<NotifyRequest_Information> | undefined, b: NotifyRequest_Information | PlainMessage<NotifyRequest_Information> | undefined): boolean {
    return proto3.util.equals(NotifyRequest_Information, a, b);
  }
}

/**
 * @generated from message notification.v1.NotifyResponse
 */
export class NotifyResponse extends Message<NotifyResponse> {
  constructor(data?: PartialMessage<NotifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "notification.v1.NotifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotifyResponse {
    return new NotifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotifyResponse {
    return new NotifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotifyResponse {
    return new NotifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NotifyResponse | PlainMessage<NotifyResponse> | undefined, b: NotifyResponse | PlainMessage<NotifyResponse> | undefined): boolean {
    return proto3.util.equals(NotifyResponse, a, b);
  }
}

